name: build

on: [push, pull_request]

env:
  PYTEST_ADDOPTS: "--color=yes"
  CHANGELOG_PATH: "${{ github.workspace }}-CHANGELOG.txt"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Pip cache
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('**/pyproject.toml') }}
      - name: Upgrade Pip
        run: python -m pip install -U pip
      - name: Install Poetry
        run: python -m pip install poetry
      - name: Set up Poetry cache
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          poetry run pip install -U pip
          poetry install --all-extras
      - name: Run tests
        run: poetry run pytest


  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Set Poetry cache
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Upgrade Pip
        run: python -m pip install -U pip
      - name: Install Poetry
        run: python -m pip install poetry
      - name: Install dependencies
        run: |
          poetry run pip install -U pip
          poetry install --all-extras
      - name: Run linters
        run: poetry run invoke lint


  deploy:
    name: Deploy
    needs: [test, lint]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Check release
        id: check_release
        run: |
          python -m pip install -U pip
          python -m pip install poetry
      - name: Publish
        env:
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          poetry build
          poetry publish -u __token__ -p $PYPI_PASSWORD
      - name: Prepare GitHub release body
        run: |
          export previousTag=$(git tag --sort=-creatordate | sed -n 2p)
          echo '```' > "${{ env.CHANGELOG_PATH }}"
          git shortlog ${previousTag}..${{ github.ref }} >> "${{ env.CHANGELOG_PATH }}"
          echo '```' >> "${{ env.CHANGELOG_PATH }}"
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          body_path: "${{ env.CHANGELOG_PATH }}"
          files: "dist/*"
